import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
import json

TOKEN = '7624076910:AAFtnSHskqlY_Aak_mfMkKwSB76c2fmm62s'
bot = telebot.TeleBot(TOKEN)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –º–∞—Ä—à—Ä—É—Ç—ã
with open("route.json", encoding="utf-8") as f:
    ROUTES = json.load(f)

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
user_route = {}  # user_id -> route_id
user_step = {}  # user_id -> stop_index


# –ü–æ–ª—É—á–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç –ø–æ ID
def get_route(route_id):
    for route in ROUTES:
        if route["id"] == route_id:
            return route
    return None


@bot.message_handler(commands=['start'])
def main(message):
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("–ö–æ–Ω–µ—á–Ω–æ", callback_data="start_walk"))
    markup.row(
        InlineKeyboardButton("–î–∞", callback_data="start_walk"),
        InlineKeyboardButton("–°–∞–º–æ —Å–æ–±–æ–π", callback_data="start_walk")
    )
    bot.send_message(
        message.chat.id,
        """üó∫Ô∏è –ü—Ä–∏–≤–µ—Ç!
–Ø ‚Äî –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–∏–¥ –ø–æ –ú–æ—Å–∫–≤–µ. –ì–æ—Ç–æ–≤ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–∞—Å –ø–æ —É–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º, —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Ç–∞–π–Ω–∞—Ö —Å—Ç–∞—Ä–∏–Ω–Ω—ã—Ö —É–ª–∏—Ü, –ø–∞–º—è—Ç–Ω–∏–∫–∞—Ö –∏ —Å–∫—Ä—ã—Ç—ã—Ö –∂–µ–º—á—É–∂–∏–Ω–∞—Ö —Å—Ç–æ–ª–∏—Ü—ã.

üìç –î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–π–æ–Ω –ú–æ—Å–∫–≤—ã, –≥–¥–µ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å. –Ø –ø—Ä–µ–¥–ª–æ–∂—É –º–∞—Ä—à—Ä—É—Ç—ã –∏ –ø–æ–º–æ–≥—É –ø—Ä–æ–π—Ç–∏ –∏—Ö —à–∞–≥ –∑–∞ —à–∞–≥–æ–º.

üö∂‚Äç‚ôÄÔ∏è –ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å –ø—Ä–æ–≥—É–ª–∫—É?""",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda c: c.data == "start_walk")
def choose_route(call):
    bot.answer_callback_query(call.id)
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(
        KeyboardButton("–ü–æ —Ü–µ–Ω—Ç—Ä—É –ú–æ—Å–∫–≤—ã"),
        KeyboardButton("10 –≥–ª–∞–≤–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ú–æ—Å–∫–≤—ã")
    )
    kb.row(
        KeyboardButton("–û—Ç –ö—Ä–µ–º–ª—è –¥–æ –ê—Ä–±–∞—Ç–∞"),
        KeyboardButton("–í–î–ù–•: –æ—Ç –∞—Ä–∫–∏ –¥–æ –∫–æ—Å–º–æ—Å–∞")
    )
    bot.send_message(call.message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:", reply_markup=kb)



@bot.message_handler(func=lambda m: m.text in ["–ü–æ —Ü–µ–Ω—Ç—Ä—É –ú–æ—Å–∫–≤—ã", "10 –≥–ª–∞–≤–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ú–æ—Å–∫–≤—ã","–û—Ç –ö—Ä–µ–º–ª—è –¥–æ –ê—Ä–±–∞—Ç–∞","–í–î–ù–•: –æ—Ç –∞—Ä–∫–∏ –¥–æ –∫–æ—Å–º–æ—Å–∞"])
def start_selected_route(message):
    route_map = {
        "–ü–æ —Ü–µ–Ω—Ç—Ä—É –ú–æ—Å–∫–≤—ã": "center_moscow",
        "10 –≥–ª–∞–≤–Ω—ã—Ö –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π –ú–æ—Å–∫–≤—ã": "top_10_moscow",
        "–û—Ç –ö—Ä–µ–º–ª—è –¥–æ –ê—Ä–±–∞—Ç–∞": "kremlin_to_arbat",
        "–í–î–ù–•: –æ—Ç –∞—Ä–∫–∏ –¥–æ –∫–æ—Å–º–æ—Å–∞": "vdnh_tour"
    }
    route_id = route_map[message.text]
    user_route[message.chat.id] = route_id
    user_step[message.chat.id] = 0
    send_stop(message.chat.id)


def send_stop(chat_id):
    route_id = user_route.get(chat_id)
    step = user_step.get(chat_id, 0)
    route = get_route(route_id)

    if not route or step >= len(route["stops"]):
        ikb = InlineKeyboardMarkup()
        ikb.add(InlineKeyboardButton("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_walk"))
        bot.send_message(chat_id, "üéâ –≠–∫—Å–∫—É—Ä—Å–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –•–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –¥—Ä—É–≥—É—é?", reply_markup=ikb)
        return

    stop = route["stops"][step]
    with open(stop["photo"], "rb") as img:
        bot.send_photo(
            chat_id,
            img,
            caption=f"üìç *{stop['name']}*\n\n{stop['short_desc']}",
            parse_mode='Markdown'
        )

    ikb = InlineKeyboardMarkup()
    ikb.add(
        InlineKeyboardButton("üìú –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"more_{step}"),
        InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next_{step}")
    )
    ikb.add(InlineKeyboardButton("üó∫ –û—Ç–∫—Ä—ã—Ç—å –≤ –Ø–Ω–¥–µ–∫—Å.–ö–∞—Ä—Ç–∞—Ö", url=stop["yandex_map_url"]))
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=ikb)


@bot.callback_query_handler(func=lambda c: c.data.startswith("more_"))
def show_more(call):
    step = int(call.data.split("_")[1])
    route_id = user_route.get(call.message.chat.id)
    route = get_route(route_id)
    history = route["stops"][step]["long_history"]
    parts = [history[i:i + 4000] for i in range(0, len(history), 4000)]

    for part in parts:
        bot.send_message(call.message.chat.id, part)

    ikb = InlineKeyboardMarkup()
    ikb.add(InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data=f"next_{step}"))
    bot.send_message(call.message.chat.id, "–ì–æ—Ç–æ–≤—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?", reply_markup=ikb)
    bot.answer_callback_query(call.id)


@bot.callback_query_handler(func=lambda c: c.data.startswith("next_"))
def next_step(call):
    step = int(call.data.split("_")[1]) + 1
    user_step[call.message.chat.id] = step
    bot.answer_callback_query(call.id)
    send_stop(call.message.chat.id)


bot.infinity_polling()

